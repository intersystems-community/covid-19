name: Deploy Covid19-analytics

on:
  push:
    branches:
      - master
    
# Environment variables.
# ${{ secrets }} are taken from GitHub -> Settings -> Secrets
# ${{ github.sha }} is the commit hash
env:
  PROJECT_ID:                 covid2019-analytics
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
  GOOGLE_CREDENTIALS:         ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}  # Special Terraform variable
  GITHUB_SHA:                 ${{ github.sha }}
  GCR_LOCATION:               eu.gcr.io
  IMAGE_NAME:                 covid19
  GKE_CLUSTER:                covid19
  GKE_ZONE:                   europe-west2-b

jobs:
  build-and-publish-image:
    name: Setup gcloud utility, Build image and Publish it to Google Container Registry
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup gcloud cli
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.2
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Configure docker to use the gcloud as a credential helper
      run: |
        gcloud auth configure-docker

    - name: Build image
      run: |
        docker build -t ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA} .

    - name: Publish image to GCR
      run: |
        docker push ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}

  infra-provisioner:
    name: Provision infrastructure
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: .infra/terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Terraform install
      uses: hashicorp/setup-terraform@v1.2.0
      with:
        terraform_version: 0.12.29

    - name: Terraform init
      id: init
      run: terraform init

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform apply
      id: apply
      run: terraform apply -auto-approve

  packages-install:
    name: Deploy packages to provide external access
    needs:
    - build-and-publish-image
    - infra-provisioner

    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Helm
      uses: azure/setup-helm@v1
      id: install
      with:
        version: v3.3.4

    - name: Setup gcloud cli
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.2
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Connect to cluster
      run: |
        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}
     
    - name: Install Nginx Ingress controller
      run: |-
        LOAD_BALANCER_IP=$(gcloud compute addresses list --project ${PROJECT_ID} --filter="name~'${GKE_CLUSTER}-regional'" --format="value(Address)")
        echo ${LOAD_BALANCER_IP}

        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        kubectl create namespace nginx-ingress --dry-run=client -o yaml | kubectl apply -f -

        helm upgrade nginx-ingress                                    \
          --namespace nginx-ingress                                   \
          ingress-nginx/ingress-nginx                                 \
          --install                                                   \
          --atomic                                                    \
          --version 3.1.0                                             \
          --set controller.service.loadBalancerIP=${LOAD_BALANCER_IP} \

    - name: Install Certification Manager
      working-directory: .infra/cert-manager
      run: |-
        helm repo add jetstack https://charts.jetstack.io
        kubectl create namespace cert-manager --dry-run=client -o yaml | kubectl apply -f -
        kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.2/cert-manager.crds.yaml

        helm upgrade cert-manager  \
          --namespace cert-manager \
          jetstack/cert-manager    \
          --install                \
          --atomic                 \
          --version v1.0.2

        kubectl apply -f lets-encrypt-staging.yaml
        kubectl apply -f lets-encrypt-production.yaml

  iris-application-deploy:
    name: Deploy IRIS application Kubernetes manifests
    needs:
    - build-and-publish-image
    - infra-provisioner
    - packages-install

    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: .infra/kubernetes

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set image name
      run: |
        sed -i "s|image: iris|image: ${GCR_LOCATION}/${PROJECT_ID}/${IMAGE_NAME}:${GITHUB_SHA}|" iris-deployment.yaml

    - name: Setup gcloud cli
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.2
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Apply Kubernetes manifests
      run: |
        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${PROJECT_ID}
        kubectl apply -R -f .
        kubectl rollout status deployment/iris